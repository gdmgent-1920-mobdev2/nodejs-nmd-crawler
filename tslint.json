{
    "rules": {
        "adjacent-overload-signatures": true,
        "ban-comma-operator": true,
        "no-namespace": true,
        "no-parameter-reassignment": true,
        "no-reference": true,
        "no-unnecessary-type-assertion": true,
        "label-position": true,
        "no-conditional-assignment": true,
        "no-construct": true,
        "no-duplicate-super": true,
        "no-duplicate-switch-case": true,
        "no-duplicate-variable": [true, "check-parameters"],
        "no-shadowed-variable": true,
        "no-empty": [true, "allow-empty-catch"],
        "no-floating-promises": true,
        "no-implicit-dependencies": true,
        "no-invalid-this": true,
        "no-string-throw": true,
        // Disallow control flow statements, such as return, continue, break, and throw in finally blocks.
        "no-unsafe-finally": true,
        // Expressions must always return a value. Avoids common errors like const myValue = functionReturningVoid();
        "no-void-expression": [true, "ignore-arrow-function-shorthand"],
        // Disallow duplicate imports in the same file.
        "no-duplicate-imports": true,
        // -- Strong Warnings --
        // These rules should almost never be needed, but may be included due to legacy code.
        // They are left as a warning to avoid frustration with blocked deploys when the developer
        // understand the warning and wants to deploy anyway.
        // Warn when an empty interface is defined. These are generally not useful.
        "no-empty-interface": {"severity": "warning"},
        // Warn when an import will have side effects.
        "no-import-side-effect": {"severity": "warning"},
        // Warn when variables are defined with var. Var has subtle meaning that can lead to bugs. Strongly prefer const for
        // most values and let for values that will change.
        "no-var-keyword": {"severity": "warning"},
        // Prefer === and !== over == and !=. The latter operators support overloads that are often accidental.
        "triple-equals": {"severity": "warning"},
        // Warn when using deprecated APIs.
        "deprecation": {"severity": "warning"},
        // -- Light Warnings --
        // These rules are intended to help developers use better style. Simpler code has fewer bugs. These would be "info"
        // if TSLint supported such a level.
        // prefer for( ... of ... ) to an index loop when the index is only used to fetch an object from an array.
        // (Even better: check out utils like .map if transforming an array!)
        "prefer-for-of": {"severity": "warning"},
        // Warns if function overloads could be unified into a single function with optional or rest parameters.
        "unified-signatures": {"severity": "warning"},
        // Prefer const for values that will not change. This better documents code.
        "prefer-const": {"severity": "warning"},
        // Multi-line object literals and function calls should have a trailing comma. This helps avoid merge conflicts.
        "trailing-comma": {"severity": "warning"}
    },
    "defaultSeverity": "error" 
}